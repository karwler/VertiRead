#version 450

layout(constant_id = 0) const bool orderRgb = true;
layout(local_size_x = 32) in;

layout(push_constant) uniform PushData {
	uint offset;
} psData;

layout(set = 0, binding = 0) readonly buffer InputData {
	uint pixels[];
} inData;

layout(set = 0, binding = 1, rgba8) writeonly uniform image2D img;

#define storeColor(id, size, clr) \
	vec3 co = vec3(clr & 0xFF, (clr >> 8) & 0xFF, (clr >> 16) & 0xFF) / 255.0; \
	imageStore(img, ivec2((id) % size.x, (id) / size.x), vec4(co, 1.0))

void main() {
	uint cid = (gl_WorkGroupID.x + psData.offset) * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
	uint iid = cid * 3;
	uint oid = cid * 4;
	ivec2 size = imageSize(img);
	uint len = size.x * size.y;

	uint p0, p1, p2;
	if (oid < len) {
		p0 = inData.pixels[iid];
		uint clr = orderRgb
			? p0
			: ((p0 >> 16) & 0x000000FF) | (p0 & 0x0000FF00) | ((p0 << 16) & 0x00FF0000);
		storeColor(oid, size, clr);
	}
	if (oid + 1 < len) {
		p1 = inData.pixels[iid + 1];
		uint clr = orderRgb
			? (p0 >> 24) | (p1 << 8)
			: ((p1 >> 8) & 0x000000FF) | ((p1 << 8) & 0x0000FF00) | ((p0 >> 8) & 0x00FF0000);
		storeColor(oid + 1, size, clr);
	}
	if (oid + 2 < len) {
		p2 = inData.pixels[iid + 2];
		uint clr = orderRgb
			? (p1 >> 16) | (p2 << 16)
			: (p2 & 0x000000FF) | ((p1 >> 16) & 0x0000FF00) | (p1 & 0x00FF0000);
		storeColor(oid + 2, size, clr);
	}
	if (oid + 3 < len) {
		uint clr = orderRgb
			? (p2 >> 8)
			: ((p2 >> 16) & 0x000000FF) | ((p2 >> 8) & 0x0000FF00) | ((p2 << 8) & 0x00FF0000);
		storeColor(oid + 3, size, clr);
	}
}
